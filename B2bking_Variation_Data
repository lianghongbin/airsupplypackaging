
/**
 * B2BKing 变体数据层（只取数据，不负责 UI）
 * + 短码 [b2bking_bulkorder_current] —— 仅做“阶梯价测试输出”
 *
 * - 不改你现有短码名
 * - 修复首段价：与前端 Price 列一致的计算路径（sale/regular → 显示价换算 → wc 格式化）
 * - 阶梯价优先按 B2B 分组/全局/再退回 regular
 */

if (!class_exists('B2bking_Variation_Data')) :

final class B2bking_Variation_Data {

    /** 读取 variable product id（优先参数，兜底当前产品页） */
    public static function resolve_product_id(array $args = []) : int {
        $pid = isset($args['product_id']) ? absint($args['product_id']) : 0;
        if (!$pid && function_exists('is_product') && is_product()) {
            $pid = get_the_ID();
        }
        return $pid;
    }

    /** 主入口：父商品 + 变体 + 阶梯价格（含首段价） */
    public static function collect(array $args = []) : array {
        $pid = self::resolve_product_id($args);
        $cache_key = 'as_bulk_data_' . $pid;

        // 你在调试期间，可以先注释缓存，避免老数据
        // $cached = get_transient($cache_key);
        // if ($cached !== false) return $cached;

        $out = [
            'ok'         => false,
            'reason'     => '',
            'product_id' => $pid,
            'currency'   => function_exists('get_woocommerce_currency') ? get_woocommerce_currency() : '',
            'parent'     => null,
            'variations' => [],
        ];

        if (!$pid) { $out['reason'] = 'No product_id'; return $out; }

        $parent = wc_get_product($pid);
        if (!$parent || !$parent->is_type('variable')) {
            $out['reason'] = 'Product must be variable';
            return $out;
        }

        $out['parent'] = [
            'id'    => $parent->get_id(),
            'name'  => $parent->get_name(),
            'sku'   => $parent->get_sku(),
            'price_html' => $parent->get_price_html(),
        ];

        $variation_ids = $parent->get_children();
        foreach ($variation_ids as $vid) {
            $v = wc_get_product($vid);
            if (!$v || !$v->is_type('variation')) continue;

            // 阶梯价
            $tiers = self::get_tiers_for_variation($v);

            // 与你前端“Price 列”一致的首段价
            $base = self::get_base_price_set($v);

            $out['variations'][] = [
                'id'              => $v->get_id(),
                'sku'             => $v->get_sku(),
                'attributes'      => $v->get_variation_attributes(),
                'size'            => self::attr_value($v, 'size'),
                'description'     => self::attr_value($v, 'case'),
                'price_html'      => $v->get_price_html(),
                'price'           => self::price_float($v->get_price()),
                'regular_price'   => self::price_float($v->get_regular_price()),
                'sale_price'      => self::price_float($v->get_sale_price()),
                'tiers'           => $tiers, // [['qty'=>5,'price'=>9.00,'price_html'=>'$9.00'], ...] 按 qty 升序
                'base_price'      => $base['base_price'],      // float（展示价换算后的）
                'base_price_html' => $base['base_price_html'], // HTML（可能是促销样式）
                'stock_quantity'  => $v->get_stock_quantity(),
                'stock_status'    => $v->get_stock_status(),
            ];
        }

        $out['ok'] = true;
        // set_transient($cache_key, $out, HOUR_IN_SECONDS); // 调试完可开启
        return $out;
    }

    /** 从变体读某个属性值（兼容 pa_size / size / 大小写） */
    public static function attr_value(WC_Product $product, string $key) : string {
        $key = trim($key);
        if ($key === '') return '';
        $candidates = array_unique(array_filter([
            $key,
            'pa_' . $key,
            wc_sanitize_taxonomy_name($key),
            'pa_' . wc_sanitize_taxonomy_name($key),
            ucfirst($key),
            'Pa_' . ucfirst($key),
            strtoupper($key),
        ]));

        foreach ($candidates as $k) {
            $val = $product->get_attribute($k);
            if (!empty($val)) return $val;

            $attrs = $product->get_attributes();
            if (!empty($attrs[$k])) {
                $raw = $attrs[$k];
                if (is_string($raw) && taxonomy_exists($k)) {
                    $term = get_term_by('slug', $raw, $k);
                    if ($term && !is_wp_error($term)) return $term->name;
                }
                return is_array($raw) ? implode(', ', $raw) : (string)$raw;
            }
        }
        return '';
    }

    /** B2BKing 阶梯价（优先方法；兜底 meta；返回规范化结构） */
    public static function get_tiers_for_variation(WC_Product $variation) : array {
        $vid = $variation->get_id();
        $tiers = [];

        if (function_exists('b2bking') && method_exists(b2bking(), 'b2bking_wc_get_price_to_display')) {
            $obj = b2bking();
            $candidates = [
                'b2bking_get_price_tiers',
                'get_price_tiers',
                'b2bking_user_get_price_tiers',
            ];
            foreach ($candidates as $m) {
                if (method_exists($obj, $m)) {
                    try {
                        $raw = $obj->{$m}($vid);
                        $tiers = self::normalize_tiers($raw, $variation);
                        if (!empty($tiers)) return $tiers;
                    } catch (\Throwable $e) { /* ignore */ }
                }
            }
            // 兜底读当前用户组 meta
            if (method_exists($obj, 'get_user_group')) {
                $group_id = $obj->get_user_group(get_current_user_id());
                $meta_key = "b2bking_product_pricetiers_group_{$group_id}";
                $raw_tiers = get_post_meta($vid, $meta_key, true);
                if ($raw_tiers) {
                    $tiers = self::normalize_tiers($raw_tiers, $variation);
                }
            }
        }
        return $tiers;
    }

    /** 把阶梯价原始结果规范化为统一数组 */
    protected static function normalize_tiers($raw, WC_Product $variation) : array {
        if (empty($raw)) return [];
        $out = [];

        if (is_string($raw)) {
            // 形如 "5:9;10:8;20:6;"
            $pairs = explode(';', trim($raw, ';'));
            foreach ($pairs as $pair) {
                if (strpos($pair, ':') === false) continue;
                list($qty, $price) = array_map('trim', explode(':', $pair, 2));
                $qty = (float)$qty; $price = (float)$price;
                if ($qty > 0 && $price >= 0) {
                    $out[] = [
                        'qty'        => $qty,
                        'price'      => $price,
                        'price_html' => self::price_to_html($variation, $price),
                    ];
                }
            }
        } elseif (is_array($raw)) {
            foreach ($raw as $tier) {
                if (!is_array($tier)) continue;
                $qty   = isset($tier['quantity']) ? (float)$tier['quantity'] : (isset($tier['qty']) ? (float)$tier['qty'] : 0);
                $price = isset($tier['price']) ? (float)$tier['price'] : 0;
                if ($qty > 0 && $price >= 0) {
                    $out[] = [
                        'qty'        => $qty,
                        'price'      => $price,
                        'price_html' => self::price_to_html($variation, $price),
                    ];
                }
            }
        }

        usort($out, function($a,$b){ return $a['qty'] <=> $b['qty']; });
        return $out;
    }

    /** 与你“Price 列”完全一致的首段价计算（0～首档-1） */
    public static function get_base_price_set(WC_Product $product): array {
        $reg  = $product->get_regular_price();
        $sale = $product->get_sale_price();
        $reg_f  = is_numeric($reg)  ? (float)$reg  : 0.0;
        $sale_f = is_numeric($sale) ? (float)$sale : 0.0;

        $display_cb = function(float $p) use ($product){
            if (function_exists('b2bking') && method_exists(b2bking(), 'b2bking_wc_get_price_to_display')) {
                return (float) b2bking()->b2bking_wc_get_price_to_display($product, ['price' => $p]);
            }
            if (function_exists('wc_get_price_to_display')) {
                return (float) wc_get_price_to_display($product, ['price' => $p]);
            }
            return $p;
        };

        $reg_disp  = $display_cb($reg_f);
        $sale_disp = $display_cb($sale_f);

        if ($product->is_on_sale() && $sale_f > 0) {
            $html = function_exists('wc_format_sale_price')
                ? wc_format_sale_price($reg_disp, $sale_disp)
                : ( (function_exists('wc_price') ? wc_price($sale_disp) : number_format($sale_disp,2))
                    .' '.
                    (function_exists('wc_price') ? wc_price($reg_disp)  : number_format($reg_disp, 2)) );
            $base = $sale_disp;
        } else {
            $html = function_exists('wc_price') ? wc_price($reg_disp) : number_format($reg_disp, 2);
            $base = $reg_disp;
        }

        return [
            'base_price'      => $base,
            'base_price_html' => $html,
        ];
    }

    /** 把浮点价按站点货币格式化（含税/不含税由 Woo 控制） */
    public static function price_to_html(WC_Product $product, float $price) : string {
        $display = $price;
        if (function_exists('b2bking') && method_exists(b2bking(), 'b2bking_wc_get_price_to_display')) {
            $display = (float) b2bking()->b2bking_wc_get_price_to_display($product, ['price' => $price]);
        } elseif (function_exists('wc_get_price_to_display')) {
            $display = (float) wc_get_price_to_display($product, ['price' => $price]);
        }
        return function_exists('wc_price') ? wc_price($display) : number_format($display, 2);
    }

    /** 安全转换成 float */
    public static function price_float($val) : float {
        if ($val === '' || $val === null) return 0.0;
        if (is_numeric($val)) return (float)$val;
        $num = preg_replace('/[^\d\.]/', '', (string)$val);
        return (float)$num;
    }
}

endif;


/**
 * 短码（测试用）：仅输出每个变体的价格区间
 * 0–(首档-1) 用 base_price_html；后续各档用 tiers 的 price_html
 * 用法：在产品页直接放 [b2bking_bulkorder_current] 即可
 */
add_shortcode('b2bking_bulkorder_current', function($atts){
    if (!class_exists('B2bking_Variation_Data')) {
        return '<pre>Class B2bking_Variation_Data not found.</pre>';
    }

    $atts = shortcode_atts([
        'product_id' => 0,
    ], $atts, 'b2bking_bulkorder_current');

    $data = B2bking_Variation_Data::collect([
        'product_id' => absint($atts['product_id']),
    ]);
    if (empty($data['ok'])) {
        return '<pre>Collect failed: '.esc_html($data['reason'] ?? 'unknown').'</pre>';
    }

    ob_start(); ?>
    <div class="bulk-tiers-dump">
      <h4 style="margin:4px 0 10px;"><?php echo esc_html($data['parent']['name'] ?? ''); ?> — Variations Tiers (test)</h4>
      <?php foreach ($data['variations'] as $var):
            $vid  = (int) ($var['id'] ?? 0);
            $prod = $vid ? wc_get_product($vid) : null;
            if (!$prod) continue;

            $sku   = $var['sku'] ?? '';
            $size  = $var['size'] ?? '';
            $desc  = $var['description'] ?? '';

            // 首段价（HTML）
            $base_html = $var['base_price_html'] ?? '';

            // 阶梯（按 qty 升序）
            $tiers = is_array($var['tiers'] ?? null) ? $var['tiers'] : [];
            $tiers = array_values(array_filter($tiers, function($t){
                return isset($t['qty']) && floatval($t['qty']) > 0;
            }));
            usort($tiers, function($a,$b){ return floatval($a['qty']) <=> floatval($b['qty']); });

            // 输出
            ?>
            <div style="margin:10px 0; padding:10px; border:1px solid #eee;">
              <div><strong>SKU:</strong> <?php echo esc_html($sku ?: '—'); ?></div>
              <div><strong>SIZE:</strong> <?php echo wp_kses_post($size ?: '—'); ?></div>
              <div><strong>CASE/DESC:</strong> <?php echo wp_kses_post($desc ?: '—'); ?></div>

              <div style="margin-top:6px;"><strong>PRICE TIERS:</strong></div>
              <div style="line-height:1.9;">
                <?php
                if (!empty($tiers)) {
                    // 第一档前的 0~(q1-1)
                    $q1 = max(1, (int)floor($tiers[0]['qty']));
                    echo '<div>'.esc_html('0–'.($q1-1)).': '.wp_kses_post($base_html).'</div>';

                    // 后续区间
                    $count = count($tiers);
                    for ($i = 0; $i < $count; $i++) {
                        $start = (int)floor($tiers[$i]['qty']);
                        $end   = ($i+1 < $count) ? ((int)floor($tiers[$i+1]['qty']) - 1) : null;
                        $label = is_null($end) ? ($start.'+') : ($start.'–'.$end);
                        $phtml = $tiers[$i]['price_html'] ?? '';
                        echo '<div>'.esc_html($label).': '.wp_kses_post($phtml).'</div>';
                    }
                } else {
                    // 没有阶梯：只显示 0+
                    echo '<div>0+: '.wp_kses_post($base_html).'</div>';
                }
                ?>
              </div>
            </div>
      <?php endforeach; ?>
    </div>
    <?php
    return ob_get_clean();
});